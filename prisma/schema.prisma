generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  password     String
  pseudo       String
  characters   Character[]
  hostedgames  Game[]
  soundLibrary SoundLibrary[]
}

model Character {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  alignment     String?
  traits        String?  @db.Text
  ideals        String?  @db.Text
  bonds         String?  @db.Text
  flaws         String?  @db.Text
  race          String?
  class         String?
  background    String?
  abilityScores Json // Stores the ability scores object
  equipment     Json // Array of equipment strings
  skills        Json // Array of selected skills
  rollDetails   Json // Stores the roll details object
  hp            Int?
  userId        String? // Optional: for user association
  games         Game[]   @relation("GameCharacters")
  spells        Json?
  Token         Token[]
  user          User?    @relation(fields: [userId], references: [id])
}

model Game {
  id                String         @id @default(cuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  characters        Character[]    @relation("GameCharacters")
  sessions          Session[]
  gameMaster        User           @relation(fields: [gameMasterId], references: [id])
  gameMasterId      String
  soundLibrary      SoundLibrary[]
  name              String         @default("My new campaign")
  googleCalendarUrl String?
}

model Token {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  type        String
  name        String
  xPercent    Float
  yPercent    Float
  size        Float
  hitPoint    Int
  maxHitPoint Int
  session     Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   String
  icon        String?
  monsterId   String?
  monster     Monster?   @relation(fields: [monsterId], references: [id])
  characterId String?
  character   Character? @relation(fields: [characterId], references: [id])
  visibility  String     @default("visible")
}

model Session {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  gameId       String
  game         Game           @relation(fields: [gameId], references: [id])
  tokens       Token[]
  notes        String?        @db.LongText
  name         String
  fogOfWar     String?        @db.LongText
  viewState    Json?
  soundLibrary SoundLibrary[]
}

model SoundLibrary {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  sounds    Sound[]
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  game      Game?    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String?
  isDefault Boolean  @default(false)
}

model Sound {
  cid            String       @id @default(cuid())
  id             String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  label          String
  category       String
  url            String
  volume         Float
  duration       Float
  loop           Boolean
  waveformUrl    String
  soundLibrary   SoundLibrary @relation(fields: [soundLibraryId], references: [id], onDelete: Cascade)
  soundLibraryId String
  isFavorite     Boolean      @default(false)
}

model Monster {
  id                     String            @id @default(cuid())
  slug                   String            @unique
  name                   String            @unique
  size                   String
  type                   String
  alignment              String
  armor_class            String
  hit_points             Int
  hit_dice               String?
  hit_points_roll        String?
  speed                  String
  abilities              Ability[]
  actions                Action[]
  special_abilities      SpecialAbility[]
  description            String?           @db.LongText
  source                 String
  imageUrl               String?
  saving_throws          Json?
  skills                 Json?
  senses                 Json?
  languages              Json?
  damage_immunities      Json?
  condition_immunities   Json?
  damage_resistances     Json?
  proficiency_bonus      Json?
  damage_vulnerabilities Json?
  challenge_rating       Int?
  xp                     Int
  legendary_actions      LegendaryAction[]
  token                  Token[]
}

model Ability {
  id        String  @id @default(cuid())
  name      String
  value     Int
  modifier  String
  monsterId String
  monster   Monster @relation(fields: [monsterId], references: [id], onDelete: Cascade)
}

model Action {
  id          String  @id @default(cuid())
  name        String
  description String  @db.LongText
  monsterId   String
  monster     Monster @relation(fields: [monsterId], references: [id], onDelete: Cascade)
}

model LegendaryAction {
  id          String  @id @default(cuid())
  name        String
  description String  @db.LongText
  monsterId   String
  monster     Monster @relation(fields: [monsterId], references: [id], onDelete: Cascade)
}

model SpecialAbility {
  id          String  @id @default(cuid())
  name        String  @db.Text
  description String  @db.LongText
  monsterId   String
  monster     Monster @relation(fields: [monsterId], references: [id], onDelete: Cascade)
}
